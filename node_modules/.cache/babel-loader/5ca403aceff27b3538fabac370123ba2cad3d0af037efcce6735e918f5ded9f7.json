{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TypingText=_ref=>{let{text,input}=_ref;return/*#__PURE__*/_jsxs(\"div\",{className:\"font-bold w-[80%] text-justify text-4xl\",children:[text.split('').map((char,index)=>{let className='text-gray-300';// Обычный цвет текста (серый)\n// Условие для правильного символа\nif(input[index]===char){className='text-green-500';// Правильный символ (зеленый)\n}// Условие для пробела между словами\nelse if(char===' '&&input[index]!==char){className='text-gray-400';// Обычный цвет пробела\n}// Условие для неправильного символа\nelse if(input[index]!==undefined&&char!==' '){className='text-red-500';// Неправильный символ (красный)\n}return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:className,children:char}),index===input.length-1&&input.length!==text.length&&/*#__PURE__*/_jsx(\"span\",{className:\"blinking-cursor\",children:\"|\"})]},index);}),input.length===text.length&&/*#__PURE__*/_jsx(\"span\",{className:\"blinking-cursor\",children:\"|\"})]});};export default TypingText;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","TypingText","_ref","text","input","className","children","split","map","char","index","undefined","Fragment","length"],"sources":["C:/Users/kol/Desktop/dela/tests/typing_speed_trainer/src/components/TypingText.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst TypingText = ({ text, input }) => {\r\n  return (\r\n    <div className=\"font-bold w-[80%] text-justify text-4xl\">\r\n      {text.split('').map((char, index) => {\r\n        let className = 'text-gray-300'; // Обычный цвет текста (серый)\r\n\r\n        // Условие для правильного символа\r\n        if (input[index] === char) {\r\n          className = 'text-green-500'; // Правильный символ (зеленый)\r\n        } \r\n        // Условие для пробела между словами\r\n        else if (char === ' ' && input[index] !== char) {\r\n          className = 'text-gray-400'; // Обычный цвет пробела\r\n        } \r\n        // Условие для неправильного символа\r\n        else if (input[index] !== undefined && char !== ' ') {\r\n          className = 'text-red-500'; // Неправильный символ (красный)\r\n        }\r\n\r\n        return (\r\n          <React.Fragment key={index}>\r\n            <span className={className}>{char}</span>\r\n            {/* Вставляем курсор после текущего символа, если это конец введенного текста */}\r\n            {index === input.length - 1 && input.length !== text.length && (\r\n              <span className=\"blinking-cursor\">|</span>\r\n            )}\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n\r\n      {/* Если пользователь ввел весь текст, но курсор еще не отображается */}\r\n      {input.length === text.length && (\r\n        <span className=\"blinking-cursor\">|</span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingText;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,KAAM,CAAAC,UAAU,CAAGC,IAAA,EAAqB,IAApB,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAAF,IAAA,CACjC,mBACEF,KAAA,QAAKK,SAAS,CAAC,yCAAyC,CAAAC,QAAA,EACrDH,IAAI,CAACI,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,GAAK,CACnC,GAAI,CAAAL,SAAS,CAAG,eAAe,CAAE;AAEjC;AACA,GAAID,KAAK,CAACM,KAAK,CAAC,GAAKD,IAAI,CAAE,CACzBJ,SAAS,CAAG,gBAAgB,CAAE;AAChC,CACA;AAAA,IACK,IAAII,IAAI,GAAK,GAAG,EAAIL,KAAK,CAACM,KAAK,CAAC,GAAKD,IAAI,CAAE,CAC9CJ,SAAS,CAAG,eAAe,CAAE;AAC/B,CACA;AAAA,IACK,IAAID,KAAK,CAACM,KAAK,CAAC,GAAKC,SAAS,EAAIF,IAAI,GAAK,GAAG,CAAE,CACnDJ,SAAS,CAAG,cAAc,CAAE;AAC9B,CAEA,mBACEL,KAAA,CAACJ,KAAK,CAACgB,QAAQ,EAAAN,QAAA,eACbR,IAAA,SAAMO,SAAS,CAAEA,SAAU,CAAAC,QAAA,CAAEG,IAAI,CAAO,CAAC,CAExCC,KAAK,GAAKN,KAAK,CAACS,MAAM,CAAG,CAAC,EAAIT,KAAK,CAACS,MAAM,GAAKV,IAAI,CAACU,MAAM,eACzDf,IAAA,SAAMO,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,GAAC,CAAM,CAC1C,GALkBI,KAML,CAAC,CAErB,CAAC,CAAC,CAGDN,KAAK,CAACS,MAAM,GAAKV,IAAI,CAACU,MAAM,eAC3Bf,IAAA,SAAMO,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,GAAC,CAAM,CAC1C,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAL,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}