{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nconst useTypingTest = (texts, initialTime, isTimeSelected) => {\n  _s();\n  const [input, setInput] = useState(\"\"); // Текущий текст, введённый пользователем\n  const [currentText, setCurrentText] = useState(texts[0]); // Текущий текст для набора\n  const [isCompleted, setIsCompleted] = useState(false); // Флаг завершения теста\n  const [time, setTime] = useState(initialTime); // Оставшееся время\n  const [wpm, setWpm] = useState(0); // Слова в минуту\n  const [errors, setErrors] = useState(0); // Количество ошибок\n  const [startTime, setStartTime] = useState(null); // Время начала теста\n  const inputRef = useRef(null); // Ссылка на поле ввода\n\n  // Обновляем время при изменении initialTime\n  useEffect(() => {\n    setTime(initialTime);\n  }, [initialTime]);\n\n  // Устанавливаем фокус на поле ввода при выборе времени\n  useEffect(() => {\n    if (inputRef.current && isTimeSelected) {\n      inputRef.current.focus();\n    }\n  }, [isTimeSelected]);\n\n  // Обновляем таймер каждую секунду\n  useEffect(() => {\n    if (startTime && !isCompleted) {\n      const interval = setInterval(() => {\n        setTime(prev => {\n          const newTime = prev - 1;\n          if (newTime <= 0) {\n            clearInterval(interval);\n            completeTest();\n            return 0;\n          }\n          return newTime;\n        });\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [startTime, isCompleted]);\n\n  // Обновляем ошибки и WPM\n  useEffect(() => {\n    if (isCompleted) {\n      if (inputRef.current) inputRef.current.blur();\n      const wordsTyped = input.trim().split(/\\s+/).length;\n      setWpm(Math.round(wordsTyped / (initialTime || 1) * 60)); // Защита от деления на ноль\n      setErrors(countErrors());\n    } else {\n      setErrors(countErrors());\n    }\n  }, [input, isCompleted, currentText, initialTime]);\n\n  // Функция для подсчета ошибок\n  const countErrors = () => {\n    return input.split(\"\").filter((char, index) => char !== currentText[index]).length;\n  };\n\n  // Проверка на завершение теста\n  useEffect(() => {\n    if (input.length === currentText.length) completeTest();\n  }, [input, currentText]);\n\n  // Завершение теста\n  const completeTest = () => {\n    setIsCompleted(true);\n    if (inputRef.current) inputRef.current.blur();\n  };\n\n  // Сброс теста\n  const resetTest = () => {\n    setInput(\"\");\n    setStartTime(null);\n    setIsCompleted(false);\n    setTime(initialTime);\n    setCurrentText(texts[Math.floor(Math.random() * texts.length)]);\n    if (inputRef.current) inputRef.current.focus();\n  };\n\n  // Обработка изменения ввода\n  const handleInputChange = value => {\n    if (!startTime) setStartTime(Date.now());\n    if (isCompleted) return;\n    const lastChar = value[value.length - 1];\n    const upcomingChar = currentText[input.length];\n\n    // Проверка корректности пробела\n    if (lastChar === \" \" && upcomingChar !== \" \") return;\n    if (value.length < input.length) {\n      // Удаление символов\n      const lastInputSpace = input.lastIndexOf(' ') + 1;\n      const lastValueSpace = value.lastIndexOf(' ') + 1;\n      if (lastValueSpace >= lastInputSpace) {\n        setInput(value);\n      } else {\n        setInput(input.slice(0, lastInputSpace));\n      }\n    } else {\n      setInput(value);\n    }\n  };\n  return {\n    input,\n    currentText,\n    isCompleted,\n    time,\n    wpm,\n    errors,\n    inputRef,\n    handleInputChange,\n    resetTest\n  };\n};\n_s(useTypingTest, \"9VkGmunXnNSRqIqAkZilspAtz2U=\");\nexport default useTypingTest;","map":{"version":3,"names":["useState","useEffect","useRef","useTypingTest","texts","initialTime","isTimeSelected","_s","input","setInput","currentText","setCurrentText","isCompleted","setIsCompleted","time","setTime","wpm","setWpm","errors","setErrors","startTime","setStartTime","inputRef","current","focus","interval","setInterval","prev","newTime","clearInterval","completeTest","blur","wordsTyped","trim","split","length","Math","round","countErrors","filter","char","index","resetTest","floor","random","handleInputChange","value","Date","now","lastChar","upcomingChar","lastInputSpace","lastIndexOf","lastValueSpace","slice"],"sources":["C:/Users/kol/Desktop/dela/tests/typing_speed_trainer/src/hooks/useTypingTest.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nconst useTypingTest = (texts, initialTime, isTimeSelected) => {\r\n  const [input, setInput] = useState(\"\"); // Текущий текст, введённый пользователем\r\n  const [currentText, setCurrentText] = useState(texts[0]); // Текущий текст для набора\r\n  const [isCompleted, setIsCompleted] = useState(false); // Флаг завершения теста\r\n  const [time, setTime] = useState(initialTime); // Оставшееся время\r\n  const [wpm, setWpm] = useState(0); // Слова в минуту\r\n  const [errors, setErrors] = useState(0); // Количество ошибок\r\n  const [startTime, setStartTime] = useState(null); // Время начала теста\r\n  const inputRef = useRef(null); // Ссылка на поле ввода\r\n\r\n  // Обновляем время при изменении initialTime\r\n  useEffect(() => {\r\n    setTime(initialTime);\r\n  }, [initialTime]);\r\n\r\n  // Устанавливаем фокус на поле ввода при выборе времени\r\n  useEffect(() => {\r\n    if (inputRef.current && isTimeSelected) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isTimeSelected]);\r\n\r\n  // Обновляем таймер каждую секунду\r\n  useEffect(() => {\r\n    if (startTime && !isCompleted) {\r\n      const interval = setInterval(() => {\r\n        setTime((prev) => {\r\n          const newTime = prev - 1;\r\n          if (newTime <= 0) {\r\n            clearInterval(interval);\r\n            completeTest();\r\n            return 0;\r\n          }\r\n          return newTime;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [startTime, isCompleted]);\r\n\r\n  // Обновляем ошибки и WPM\r\n  useEffect(() => {\r\n    if (isCompleted) {\r\n      if (inputRef.current) inputRef.current.blur();\r\n      const wordsTyped = input.trim().split(/\\s+/).length;\r\n      setWpm(Math.round((wordsTyped / (initialTime || 1)) * 60)); // Защита от деления на ноль\r\n      setErrors(countErrors());\r\n    } else {\r\n      setErrors(countErrors());\r\n    }\r\n  }, [input, isCompleted, currentText, initialTime]);\r\n\r\n  // Функция для подсчета ошибок\r\n  const countErrors = () => {\r\n    return input.split(\"\").filter((char, index) => char !== currentText[index]).length;\r\n  };\r\n\r\n  // Проверка на завершение теста\r\n  useEffect(() => {\r\n    if (input.length === currentText.length) completeTest();\r\n  }, [input, currentText]);\r\n\r\n  // Завершение теста\r\n  const completeTest = () => {\r\n    setIsCompleted(true);\r\n    if (inputRef.current) inputRef.current.blur();\r\n  };\r\n\r\n  // Сброс теста\r\n  const resetTest = () => {\r\n    setInput(\"\");\r\n    setStartTime(null);\r\n    setIsCompleted(false);\r\n    setTime(initialTime);\r\n    setCurrentText(texts[Math.floor(Math.random() * texts.length)]);\r\n    if (inputRef.current) inputRef.current.focus();\r\n  };\r\n\r\n  // Обработка изменения ввода\r\n  const handleInputChange = (value) => {\r\n    if (!startTime) setStartTime(Date.now());\r\n    if (isCompleted) return;\r\n\r\n    const lastChar = value[value.length - 1];\r\n    const upcomingChar = currentText[input.length];\r\n\r\n    // Проверка корректности пробела\r\n    if (lastChar === \" \" && upcomingChar !== \" \") return;\r\n\r\n    if (value.length < input.length) {\r\n      // Удаление символов\r\n      const lastInputSpace = input.lastIndexOf(' ') + 1;\r\n      const lastValueSpace = value.lastIndexOf(' ') + 1;\r\n\r\n      if (lastValueSpace >= lastInputSpace) {\r\n        setInput(value);\r\n      } else {\r\n        setInput(input.slice(0, lastInputSpace));\r\n      }\r\n    } else {\r\n      setInput(value);\r\n    }\r\n  };\r\n\r\n  return {\r\n    input,\r\n    currentText,\r\n    isCompleted,\r\n    time,\r\n    wpm,\r\n    errors,\r\n    inputRef,\r\n    handleInputChange,\r\n    resetTest,\r\n  };\r\n};\r\n\r\nexport default useTypingTest;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEnD,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,WAAW,EAAEC,cAAc,KAAK;EAAAC,EAAA;EAC5D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvD,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAACK,WAAW,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACW,GAAG,EAAEC,MAAM,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACnC,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACzC,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAMsB,QAAQ,GAAGpB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE/B;EACAD,SAAS,CAAC,MAAM;IACdc,OAAO,CAACV,WAAW,CAAC;EACtB,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;;EAEjB;EACAJ,SAAS,CAAC,MAAM;IACd,IAAIqB,QAAQ,CAACC,OAAO,IAAIjB,cAAc,EAAE;MACtCgB,QAAQ,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAAClB,cAAc,CAAC,CAAC;;EAEpB;EACAL,SAAS,CAAC,MAAM;IACd,IAAImB,SAAS,IAAI,CAACR,WAAW,EAAE;MAC7B,MAAMa,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCX,OAAO,CAAEY,IAAI,IAAK;UAChB,MAAMC,OAAO,GAAGD,IAAI,GAAG,CAAC;UACxB,IAAIC,OAAO,IAAI,CAAC,EAAE;YAChBC,aAAa,CAACJ,QAAQ,CAAC;YACvBK,YAAY,CAAC,CAAC;YACd,OAAO,CAAC;UACV;UACA,OAAOF,OAAO;QAChB,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAMC,aAAa,CAACJ,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACL,SAAS,EAAER,WAAW,CAAC,CAAC;;EAE5B;EACAX,SAAS,CAAC,MAAM;IACd,IAAIW,WAAW,EAAE;MACf,IAAIU,QAAQ,CAACC,OAAO,EAAED,QAAQ,CAACC,OAAO,CAACQ,IAAI,CAAC,CAAC;MAC7C,MAAMC,UAAU,GAAGxB,KAAK,CAACyB,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,CAAC,CAACC,MAAM;MACnDlB,MAAM,CAACmB,IAAI,CAACC,KAAK,CAAEL,UAAU,IAAI3B,WAAW,IAAI,CAAC,CAAC,GAAI,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5Dc,SAAS,CAACmB,WAAW,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM;MACLnB,SAAS,CAACmB,WAAW,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAAC9B,KAAK,EAAEI,WAAW,EAAEF,WAAW,EAAEL,WAAW,CAAC,CAAC;;EAElD;EACA,MAAMiC,WAAW,GAAGA,CAAA,KAAM;IACxB,OAAO9B,KAAK,CAAC0B,KAAK,CAAC,EAAE,CAAC,CAACK,MAAM,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKD,IAAI,KAAK9B,WAAW,CAAC+B,KAAK,CAAC,CAAC,CAACN,MAAM;EACpF,CAAC;;EAED;EACAlC,SAAS,CAAC,MAAM;IACd,IAAIO,KAAK,CAAC2B,MAAM,KAAKzB,WAAW,CAACyB,MAAM,EAAEL,YAAY,CAAC,CAAC;EACzD,CAAC,EAAE,CAACtB,KAAK,EAAEE,WAAW,CAAC,CAAC;;EAExB;EACA,MAAMoB,YAAY,GAAGA,CAAA,KAAM;IACzBjB,cAAc,CAAC,IAAI,CAAC;IACpB,IAAIS,QAAQ,CAACC,OAAO,EAAED,QAAQ,CAACC,OAAO,CAACQ,IAAI,CAAC,CAAC;EAC/C,CAAC;;EAED;EACA,MAAMW,SAAS,GAAGA,CAAA,KAAM;IACtBjC,QAAQ,CAAC,EAAE,CAAC;IACZY,YAAY,CAAC,IAAI,CAAC;IAClBR,cAAc,CAAC,KAAK,CAAC;IACrBE,OAAO,CAACV,WAAW,CAAC;IACpBM,cAAc,CAACP,KAAK,CAACgC,IAAI,CAACO,KAAK,CAACP,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAGxC,KAAK,CAAC+B,MAAM,CAAC,CAAC,CAAC;IAC/D,IAAIb,QAAQ,CAACC,OAAO,EAAED,QAAQ,CAACC,OAAO,CAACC,KAAK,CAAC,CAAC;EAChD,CAAC;;EAED;EACA,MAAMqB,iBAAiB,GAAIC,KAAK,IAAK;IACnC,IAAI,CAAC1B,SAAS,EAAEC,YAAY,CAAC0B,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;IACxC,IAAIpC,WAAW,EAAE;IAEjB,MAAMqC,QAAQ,GAAGH,KAAK,CAACA,KAAK,CAACX,MAAM,GAAG,CAAC,CAAC;IACxC,MAAMe,YAAY,GAAGxC,WAAW,CAACF,KAAK,CAAC2B,MAAM,CAAC;;IAE9C;IACA,IAAIc,QAAQ,KAAK,GAAG,IAAIC,YAAY,KAAK,GAAG,EAAE;IAE9C,IAAIJ,KAAK,CAACX,MAAM,GAAG3B,KAAK,CAAC2B,MAAM,EAAE;MAC/B;MACA,MAAMgB,cAAc,GAAG3C,KAAK,CAAC4C,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC;MACjD,MAAMC,cAAc,GAAGP,KAAK,CAACM,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC;MAEjD,IAAIC,cAAc,IAAIF,cAAc,EAAE;QACpC1C,QAAQ,CAACqC,KAAK,CAAC;MACjB,CAAC,MAAM;QACLrC,QAAQ,CAACD,KAAK,CAAC8C,KAAK,CAAC,CAAC,EAAEH,cAAc,CAAC,CAAC;MAC1C;IACF,CAAC,MAAM;MACL1C,QAAQ,CAACqC,KAAK,CAAC;IACjB;EACF,CAAC;EAED,OAAO;IACLtC,KAAK;IACLE,WAAW;IACXE,WAAW;IACXE,IAAI;IACJE,GAAG;IACHE,MAAM;IACNI,QAAQ;IACRuB,iBAAiB;IACjBH;EACF,CAAC;AACH,CAAC;AAACnC,EAAA,CApHIJ,aAAa;AAsHnB,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}