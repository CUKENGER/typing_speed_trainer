{"ast":null,"code":"import{useState,useEffect,useRef}from\"react\";const useTypingTest=(texts,initialTime,isTimeSelected)=>{const[input,setInput]=useState(\"\");// Текущий текст, введённый пользователем\nconst[currentText,setCurrentText]=useState(texts[0]);// Текущий текст для набора\nconst[isCompleted,setIsCompleted]=useState(false);// Флаг завершения теста\nconst[time,setTime]=useState(initialTime);// Оставшееся время\nconst[wpm,setWpm]=useState(0);// Слова в минуту\nconst[errors,setErrors]=useState(0);// Количество ошибок\nconst[startTime,setStartTime]=useState(null);// Время начала теста\nconst inputRef=useRef(null);// Ссылка на поле ввода\n// Обновляем время при изменении initialTime\nuseEffect(()=>{setTime(initialTime);},[initialTime]);// Устанавливаем фокус на поле ввода при выборе времени\nuseEffect(()=>{if(inputRef.current&&isTimeSelected){inputRef.current.focus();}},[isTimeSelected]);// Обновляем таймер каждую секунду\nuseEffect(()=>{if(startTime&&!isCompleted){const interval=setInterval(()=>{setTime(prev=>{const newTime=prev-1;if(newTime<=0){clearInterval(interval);completeTest();return 0;}return newTime;});},1000);return()=>clearInterval(interval);}},[startTime,isCompleted]);// Обновляем ошибки и WPM\nuseEffect(()=>{if(isCompleted){if(inputRef.current)inputRef.current.blur();const wordsTyped=input.trim().split(/\\s+/).length;setWpm(Math.round(wordsTyped/(initialTime||1)*60));// Защита от деления на ноль\nsetErrors(countErrors());}else{setErrors(countErrors());}},[input,isCompleted,currentText,initialTime]);// Функция для подсчета ошибок\nconst countErrors=()=>{return input.split(\"\").filter((char,index)=>char!==currentText[index]).length;};// Проверка на завершение теста\nuseEffect(()=>{if(input.length===currentText.length)completeTest();},[input,currentText]);// Завершение теста\nconst completeTest=()=>{setIsCompleted(true);if(inputRef.current)inputRef.current.blur();};// Сброс теста\nconst resetTest=()=>{setInput(\"\");setStartTime(null);setIsCompleted(false);setTime(initialTime);setCurrentText(texts[Math.floor(Math.random()*texts.length)]);if(inputRef.current)inputRef.current.focus();};// Обработка изменения ввода\nconst handleInputChange=value=>{if(!startTime)setStartTime(Date.now());if(isCompleted)return;const lastChar=value[value.length-1];const upcomingChar=currentText[input.length];// Проверка корректности пробела\nif(lastChar===\" \"&&upcomingChar!==\" \")return;if(value.length<input.length){// Удаление символов\nconst lastInputSpace=input.lastIndexOf(' ')+1;const lastValueSpace=value.lastIndexOf(' ')+1;if(lastValueSpace>=lastInputSpace){setInput(value);}else{setInput(input.slice(0,lastInputSpace));}}else{setInput(value);}};return{input,currentText,isCompleted,time,wpm,errors,inputRef,handleInputChange,resetTest};};export default useTypingTest;","map":{"version":3,"names":["useState","useEffect","useRef","useTypingTest","texts","initialTime","isTimeSelected","input","setInput","currentText","setCurrentText","isCompleted","setIsCompleted","time","setTime","wpm","setWpm","errors","setErrors","startTime","setStartTime","inputRef","current","focus","interval","setInterval","prev","newTime","clearInterval","completeTest","blur","wordsTyped","trim","split","length","Math","round","countErrors","filter","char","index","resetTest","floor","random","handleInputChange","value","Date","now","lastChar","upcomingChar","lastInputSpace","lastIndexOf","lastValueSpace","slice"],"sources":["C:/Users/kol/Desktop/dela/tests/typing_speed_trainer/src/hooks/useTypingTest.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nconst useTypingTest = (texts, initialTime, isTimeSelected) => {\r\n  const [input, setInput] = useState(\"\"); // Текущий текст, введённый пользователем\r\n  const [currentText, setCurrentText] = useState(texts[0]); // Текущий текст для набора\r\n  const [isCompleted, setIsCompleted] = useState(false); // Флаг завершения теста\r\n  const [time, setTime] = useState(initialTime); // Оставшееся время\r\n  const [wpm, setWpm] = useState(0); // Слова в минуту\r\n  const [errors, setErrors] = useState(0); // Количество ошибок\r\n  const [startTime, setStartTime] = useState(null); // Время начала теста\r\n  const inputRef = useRef(null); // Ссылка на поле ввода\r\n\r\n  // Обновляем время при изменении initialTime\r\n  useEffect(() => {\r\n    setTime(initialTime);\r\n  }, [initialTime]);\r\n\r\n  // Устанавливаем фокус на поле ввода при выборе времени\r\n  useEffect(() => {\r\n    if (inputRef.current && isTimeSelected) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [isTimeSelected]);\r\n\r\n  // Обновляем таймер каждую секунду\r\n  useEffect(() => {\r\n    if (startTime && !isCompleted) {\r\n      const interval = setInterval(() => {\r\n        setTime((prev) => {\r\n          const newTime = prev - 1;\r\n          if (newTime <= 0) {\r\n            clearInterval(interval);\r\n            completeTest();\r\n            return 0;\r\n          }\r\n          return newTime;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [startTime, isCompleted]);\r\n\r\n  // Обновляем ошибки и WPM\r\n  useEffect(() => {\r\n    if (isCompleted) {\r\n      if (inputRef.current) inputRef.current.blur();\r\n      const wordsTyped = input.trim().split(/\\s+/).length;\r\n      setWpm(Math.round((wordsTyped / (initialTime || 1)) * 60)); // Защита от деления на ноль\r\n      setErrors(countErrors());\r\n    } else {\r\n      setErrors(countErrors());\r\n    }\r\n  }, [input, isCompleted, currentText, initialTime]);\r\n\r\n  // Функция для подсчета ошибок\r\n  const countErrors = () => {\r\n    return input.split(\"\").filter((char, index) => char !== currentText[index]).length;\r\n  };\r\n\r\n  // Проверка на завершение теста\r\n  useEffect(() => {\r\n    if (input.length === currentText.length) completeTest();\r\n  }, [input, currentText]);\r\n\r\n  // Завершение теста\r\n  const completeTest = () => {\r\n    setIsCompleted(true);\r\n    if (inputRef.current) inputRef.current.blur();\r\n  };\r\n\r\n  // Сброс теста\r\n  const resetTest = () => {\r\n    setInput(\"\");\r\n    setStartTime(null);\r\n    setIsCompleted(false);\r\n    setTime(initialTime);\r\n    setCurrentText(texts[Math.floor(Math.random() * texts.length)]);\r\n    if (inputRef.current) inputRef.current.focus();\r\n  };\r\n\r\n  // Обработка изменения ввода\r\n  const handleInputChange = (value) => {\r\n    if (!startTime) setStartTime(Date.now());\r\n    if (isCompleted) return;\r\n\r\n    const lastChar = value[value.length - 1];\r\n    const upcomingChar = currentText[input.length];\r\n\r\n    // Проверка корректности пробела\r\n    if (lastChar === \" \" && upcomingChar !== \" \") return;\r\n\r\n    if (value.length < input.length) {\r\n      // Удаление символов\r\n      const lastInputSpace = input.lastIndexOf(' ') + 1;\r\n      const lastValueSpace = value.lastIndexOf(' ') + 1;\r\n\r\n      if (lastValueSpace >= lastInputSpace) {\r\n        setInput(value);\r\n      } else {\r\n        setInput(input.slice(0, lastInputSpace));\r\n      }\r\n    } else {\r\n      setInput(value);\r\n    }\r\n  };\r\n\r\n  return {\r\n    input,\r\n    currentText,\r\n    isCompleted,\r\n    time,\r\n    wpm,\r\n    errors,\r\n    inputRef,\r\n    handleInputChange,\r\n    resetTest,\r\n  };\r\n};\r\n\r\nexport default useTypingTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}