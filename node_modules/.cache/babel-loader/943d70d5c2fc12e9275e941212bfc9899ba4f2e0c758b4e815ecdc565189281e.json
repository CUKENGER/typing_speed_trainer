{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nconst useTypingTest = (texts, initialTime = 30, isTimeSelected = true) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [currentText, setCurrentText] = useState(texts[0]);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [time, setTime] = useState(initialTime);\n  const [wpm, setWpm] = useState(0);\n  const [errors, setErrors] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (inputRef.current && isTimeSelected) {\n      inputRef.current.focus(); // Устанавливаем фокус на поле ввода при загрузке\n    }\n  }, [isTimeSelected]);\n  useEffect(() => {\n    if (startTime && !isCompleted) {\n      const interval = setInterval(() => {\n        setTime(prev => {\n          if (prev <= 1) {\n            clearInterval(interval);\n            completeTest();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [startTime, isCompleted]);\n  useEffect(() => {\n    if (isCompleted) {\n      if (inputRef.current) inputRef.current.blur();\n      const wordsTyped = input.trim().split(/\\s+/).length;\n      setWpm(Math.round(wordsTyped / initialTime * 60));\n      setErrors(input.split(\"\").filter((char, index) => char !== currentText[index]).length);\n    } else {\n      setErrors(input.split(\"\").filter((char, index) => char !== currentText[index]).length);\n    }\n  }, [input, isCompleted]);\n  useEffect(() => {\n    if (input.length === currentText.length) completeTest();\n  }, [input, currentText]);\n  const completeTest = () => {\n    setIsCompleted(true);\n    if (inputRef.current) inputRef.current.blur();\n  };\n  const resetTest = () => {\n    setInput(\"\");\n    setStartTime(null);\n    setIsCompleted(false);\n    setTime(initialTime);\n    setCurrentText(texts[Math.floor(Math.random() * texts.length)]);\n    if (inputRef.current) inputRef.current.focus();\n  };\n  const handleInputChange = value => {\n    if (!startTime) setStartTime(Date.now());\n    if (isCompleted) return;\n    const lastChar = value[value.length - 1];\n    const upcomingChar = currentText[input.length];\n    if (lastChar === \" \" && upcomingChar !== \" \") return;\n    if (value.length < input.length) {\n      const lastInputSpace = input.lastIndexOf(' ') + 1;\n      const lastValueSpace = value.lastIndexOf(' ') + 1;\n      if (lastValueSpace >= lastInputSpace) {\n        setInput(value);\n      } else {\n        setInput(input.slice(0, lastInputSpace));\n      }\n    } else {\n      setInput(value);\n    }\n  };\n  return {\n    input,\n    currentText,\n    isCompleted,\n    time,\n    wpm,\n    errors,\n    inputRef,\n    handleInputChange,\n    resetTest\n  };\n};\n_s(useTypingTest, \"jojrmzHxt5LlCW1ql0JbfxYe8fs=\");\nexport default useTypingTest;","map":{"version":3,"names":["useState","useEffect","useRef","useTypingTest","texts","initialTime","isTimeSelected","_s","input","setInput","currentText","setCurrentText","isCompleted","setIsCompleted","time","setTime","wpm","setWpm","errors","setErrors","startTime","setStartTime","inputRef","current","focus","interval","setInterval","prev","clearInterval","completeTest","blur","wordsTyped","trim","split","length","Math","round","filter","char","index","resetTest","floor","random","handleInputChange","value","Date","now","lastChar","upcomingChar","lastInputSpace","lastIndexOf","lastValueSpace","slice"],"sources":["C:/Users/kol/Desktop/dela/tests/typing_speed_trainer/src/hooks/useTypingTest.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nconst useTypingTest = (texts, initialTime = 30, isTimeSelected = true) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [currentText, setCurrentText] = useState(texts[0]);\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n  const [time, setTime] = useState(initialTime);\r\n  const [wpm, setWpm] = useState(0);\r\n  const [errors, setErrors] = useState(0);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (inputRef.current && isTimeSelected) {\r\n      inputRef.current.focus(); // Устанавливаем фокус на поле ввода при загрузке\r\n    }\r\n  }, [isTimeSelected]);\r\n\r\n  useEffect(() => {\r\n    if (startTime && !isCompleted) {\r\n      const interval = setInterval(() => {\r\n        setTime((prev) => {\r\n          if (prev <= 1) {\r\n            clearInterval(interval);\r\n            completeTest();\r\n            return 0;\r\n          }\r\n          return prev - 1;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [startTime, isCompleted]);\r\n\r\n  useEffect(() => {\r\n    if (isCompleted) {\r\n      if (inputRef.current) inputRef.current.blur();\r\n      const wordsTyped = input.trim().split(/\\s+/).length;\r\n      setWpm(Math.round((wordsTyped / initialTime) * 60));\r\n      setErrors(input.split(\"\").filter((char, index) => char !== currentText[index]).length);\r\n    } else {\r\n      setErrors(input.split(\"\").filter((char, index) => char !== currentText[index]).length);\r\n    }\r\n  }, [input, isCompleted]);\r\n\r\n  useEffect(() => {\r\n    if (input.length === currentText.length) completeTest();\r\n  }, [input, currentText]);\r\n\r\n  const completeTest = () => {\r\n    setIsCompleted(true);\r\n    if (inputRef.current) inputRef.current.blur();\r\n  };\r\n\r\n  const resetTest = () => {\r\n    setInput(\"\");\r\n    setStartTime(null);\r\n    setIsCompleted(false);\r\n    setTime(initialTime);\r\n    setCurrentText(texts[Math.floor(Math.random() * texts.length)]);\r\n    if (inputRef.current) inputRef.current.focus();\r\n  };\r\n\r\n  const handleInputChange = (value) => {\r\n    if (!startTime) setStartTime(Date.now());\r\n    if (isCompleted) return;\r\n\r\n    const lastChar = value[value.length - 1];\r\n    const upcomingChar = currentText[input.length];\r\n\r\n    if (lastChar === \" \" && upcomingChar !== \" \") return;\r\n\r\n    if (value.length < input.length) {\r\n      const lastInputSpace = input.lastIndexOf(' ') + 1;\r\n      const lastValueSpace = value.lastIndexOf(' ') + 1;\r\n\r\n      if (lastValueSpace >= lastInputSpace) {\r\n        setInput(value);\r\n      } else {\r\n        setInput(input.slice(0, lastInputSpace));\r\n      }\r\n    } else {\r\n      setInput(value);\r\n    }\r\n  };\r\n\r\n  return {\r\n    input,\r\n    currentText,\r\n    isCompleted,\r\n    time,\r\n    wpm,\r\n    errors,\r\n    inputRef,\r\n    handleInputChange,\r\n    resetTest,\r\n  };\r\n};\r\n\r\nexport default useTypingTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}