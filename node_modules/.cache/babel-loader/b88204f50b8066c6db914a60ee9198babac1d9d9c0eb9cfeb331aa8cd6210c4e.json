{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nconst useTypingTest = (texts, initialTime = 30) => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [currentText, setCurrentText] = useState(texts[0]);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [time, setTime] = useState(initialTime);\n  const [wpm, setWpm] = useState(0);\n  const [errors, setErrors] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus(); // Устанавливаем фокус на поле ввода при загрузке\n    }\n  }, [isCompleted]); // Обновляем фокус при сбросе теста\n\n  useEffect(() => {\n    if (startTime) {\n      const interval = setInterval(() => {\n        setTime(prev => prev - 1);\n        if (Date.now() - startTime >= initialTime * 1000) {\n          completeTest();\n          clearInterval(interval);\n        }\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [startTime]);\n  useEffect(() => {\n    if (isCompleted) {\n      if (inputRef.current) inputRef.current.blur();\n      const wordsTyped = input.trim().split(/\\s+/).length;\n      setWpm(Math.round(wordsTyped / initialTime * 60));\n      setErrors(input.split(\"\").filter((char, index) => char !== currentText[index]).length);\n    } else {\n      setErrors(input.split(\"\").filter((char, index) => char !== currentText[index]).length);\n    }\n  }, [input, isCompleted]);\n  useEffect(() => {\n    if (input.length === currentText.length) completeTest();\n  }, [input, currentText]);\n  const completeTest = () => {\n    setIsCompleted(true);\n    if (inputRef.current) inputRef.current.blur();\n  };\n  const resetTest = () => {\n    setInput(\"\");\n    setStartTime(null);\n    setIsCompleted(false);\n    setTime(initialTime);\n    setCurrentText(texts[Math.floor(Math.random() * texts.length)]);\n    if (inputRef.current) inputRef.current.focus();\n  };\n  const handleInputChange = value => {\n    if (!startTime) setStartTime(Date.now());\n    if (isCompleted) return;\n    const lastChar = value[value.length - 1];\n    const currentWord = input.split(' ').slice(-1)[0]; // Текущее слово\n    const upcomingChar = currentText[input.length];\n\n    // Проверка на правильность ввода пробела\n    if (lastChar === \" \" && upcomingChar !== \" \") return;\n\n    // Удаление только внутри текущего слова\n    if (value.length < input.length) {\n      const lastInputSpace = input.lastIndexOf(' ') + 1;\n      const lastValueSpace = value.lastIndexOf(' ') + 1;\n\n      // Запрещаем удаление за пределы текущего слова\n      if (lastValueSpace < lastInputSpace) {\n        setInput(input.slice(0, lastInputSpace));\n        console.log();\n      } else {\n        setInput(value);\n      }\n    } else {\n      setInput(value);\n    }\n  };\n  return {\n    input,\n    currentText,\n    isCompleted,\n    time,\n    wpm,\n    errors,\n    inputRef,\n    handleInputChange,\n    resetTest\n  };\n};\n_s(useTypingTest, \"jojrmzHxt5LlCW1ql0JbfxYe8fs=\");\nexport default useTypingTest;","map":{"version":3,"names":["useState","useEffect","useRef","useTypingTest","texts","initialTime","_s","input","setInput","currentText","setCurrentText","isCompleted","setIsCompleted","time","setTime","wpm","setWpm","errors","setErrors","startTime","setStartTime","inputRef","current","focus","interval","setInterval","prev","Date","now","completeTest","clearInterval","blur","wordsTyped","trim","split","length","Math","round","filter","char","index","resetTest","floor","random","handleInputChange","value","lastChar","currentWord","slice","upcomingChar","lastInputSpace","lastIndexOf","lastValueSpace","console","log"],"sources":["C:/Users/kol/Desktop/dela/tests/typing_speed_trainer/src/hooks/useTypingTest.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nconst useTypingTest = (texts, initialTime = 30) => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [currentText, setCurrentText] = useState(texts[0]);\r\n  const [isCompleted, setIsCompleted] = useState(false);\r\n  const [time, setTime] = useState(initialTime);\r\n  const [wpm, setWpm] = useState(0);\r\n  const [errors, setErrors] = useState(0);\r\n  const [startTime, setStartTime] = useState(null);\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus(); // Устанавливаем фокус на поле ввода при загрузке\r\n    }\r\n  }, [isCompleted]); // Обновляем фокус при сбросе теста\r\n\r\n  useEffect(() => {\r\n    if (startTime) {\r\n      const interval = setInterval(() => {\r\n        setTime((prev) => prev - 1);\r\n        if (Date.now() - startTime >= initialTime * 1000) {\r\n          completeTest();\r\n          clearInterval(interval);\r\n        }\r\n      }, 1000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [startTime]);\r\n\r\n  useEffect(() => {\r\n    if (isCompleted) {\r\n      if (inputRef.current) inputRef.current.blur();\r\n      const wordsTyped = input.trim().split(/\\s+/).length;\r\n      setWpm(Math.round((wordsTyped / initialTime) * 60));\r\n      setErrors(input.split(\"\").filter((char, index) => char !== currentText[index]).length);\r\n    } else {\r\n      setErrors(input.split(\"\").filter((char, index) => char !== currentText[index]).length);\r\n    }\r\n  }, [input, isCompleted]);\r\n\r\n  useEffect(() => {\r\n    if (input.length === currentText.length) completeTest();\r\n  }, [input, currentText]);\r\n\r\n  const completeTest = () => {\r\n    setIsCompleted(true);\r\n    if (inputRef.current) inputRef.current.blur();\r\n  };\r\n\r\n  const resetTest = () => {\r\n    setInput(\"\");\r\n    setStartTime(null);\r\n    setIsCompleted(false);\r\n    setTime(initialTime);\r\n    setCurrentText(texts[Math.floor(Math.random() * texts.length)]);\r\n    if (inputRef.current) inputRef.current.focus();\r\n  };\r\n\r\n  const handleInputChange = (value) => {\r\n    if (!startTime) setStartTime(Date.now());\r\n    if (isCompleted) return;\r\n\r\n    const lastChar = value[value.length - 1];\r\n    const currentWord = input.split(' ').slice(-1)[0]; // Текущее слово\r\n    const upcomingChar = currentText[input.length];\r\n\r\n    // Проверка на правильность ввода пробела\r\n    if (lastChar === \" \" && upcomingChar !== \" \") return;\r\n\r\n    // Удаление только внутри текущего слова\r\n    if (value.length < input.length) {\r\n      const lastInputSpace = input.lastIndexOf(' ') + 1;\r\n      const lastValueSpace = value.lastIndexOf(' ') + 1;\r\n\r\n      // Запрещаем удаление за пределы текущего слова\r\n      if (lastValueSpace < lastInputSpace) {\r\n        setInput(input.slice(0, lastInputSpace));\r\n        console.log()\r\n      } else {\r\n        setInput(value);\r\n      }\r\n    } else {\r\n      setInput(value);\r\n    }\r\n  };\r\n\r\n  return {\r\n    input,\r\n    currentText,\r\n    isCompleted,\r\n    time,\r\n    wpm,\r\n    errors,\r\n    inputRef,\r\n    handleInputChange,\r\n    resetTest,\r\n  };\r\n};\r\n\r\nexport default useTypingTest;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}