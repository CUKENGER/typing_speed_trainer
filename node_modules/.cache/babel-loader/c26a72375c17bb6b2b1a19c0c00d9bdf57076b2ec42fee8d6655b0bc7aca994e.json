{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useTypingSpeed.js\nimport { useState, useEffect } from 'react';\nconst useTypingSpeed = (input, startTime, text) => {\n  _s();\n  const [wpm, setWpm] = useState(0);\n  const [errors, setErrors] = useState(0);\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  useEffect(() => {\n    if (startTime) {\n      const interval = setInterval(() => {\n        setTimeElapsed((Date.now() - startTime) / 60000); // время в минутах\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [startTime]);\n  useEffect(() => {\n    if (input.length > 0 && startTime) {\n      const wordsTyped = input.length / 5;\n      setWpm(Math.round(wordsTyped / timeElapsed));\n      setErrors(input.split('').filter((char, index) => char !== text[index]).length);\n    }\n  }, [input, timeElapsed]);\n  return {\n    wpm,\n    errors,\n    timeElapsed\n  };\n};\n_s(useTypingSpeed, \"jIqi8UrL9+dIWWXAv66Bzzu3mkQ=\");\nexport default useTypingSpeed;","map":{"version":3,"names":["useState","useEffect","useTypingSpeed","input","startTime","text","_s","wpm","setWpm","errors","setErrors","timeElapsed","setTimeElapsed","interval","setInterval","Date","now","clearInterval","length","wordsTyped","Math","round","split","filter","char","index"],"sources":["C:/Users/kol/Desktop/dela/tests/typing_speed_trainer/src/hooks/useTypingSpeed.js"],"sourcesContent":["// src/hooks/useTypingSpeed.js\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useTypingSpeed = (input, startTime, text) => {\r\n  const [wpm, setWpm] = useState(0);\r\n  const [errors, setErrors] = useState(0);\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (startTime) {\r\n      const interval = setInterval(() => {\r\n        setTimeElapsed((Date.now() - startTime) / 60000); // время в минутах\r\n      }, 1000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [startTime]);\r\n\r\n  useEffect(() => {\r\n    if (input.length > 0 && startTime) {\r\n      const wordsTyped = input.length / 5;\r\n      setWpm(Math.round(wordsTyped / timeElapsed));\r\n      setErrors(input.split('').filter((char, index) => char !== text[index]).length);\r\n    }\r\n  }, [input, timeElapsed]);\r\n\r\n  return { wpm, errors, timeElapsed };\r\n};\r\n\r\nexport default useTypingSpeed;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,cAAc,GAAGA,CAACC,KAAK,EAAEC,SAAS,EAAEC,IAAI,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,IAAIG,SAAS,EAAE;MACb,MAAMS,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCF,cAAc,CAAC,CAACG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGZ,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC;MACpD,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAMa,aAAa,CAACJ,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACT,SAAS,CAAC,CAAC;EAEfH,SAAS,CAAC,MAAM;IACd,IAAIE,KAAK,CAACe,MAAM,GAAG,CAAC,IAAId,SAAS,EAAE;MACjC,MAAMe,UAAU,GAAGhB,KAAK,CAACe,MAAM,GAAG,CAAC;MACnCV,MAAM,CAACY,IAAI,CAACC,KAAK,CAACF,UAAU,GAAGR,WAAW,CAAC,CAAC;MAC5CD,SAAS,CAACP,KAAK,CAACmB,KAAK,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKD,IAAI,KAAKnB,IAAI,CAACoB,KAAK,CAAC,CAAC,CAACP,MAAM,CAAC;IACjF;EACF,CAAC,EAAE,CAACf,KAAK,EAAEQ,WAAW,CAAC,CAAC;EAExB,OAAO;IAAEJ,GAAG;IAAEE,MAAM;IAAEE;EAAY,CAAC;AACrC,CAAC;AAACL,EAAA,CAxBIJ,cAAc;AA0BpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}